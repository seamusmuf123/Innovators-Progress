# app/src/pages/12_User_Reports.py
"""
User Reports ‚Äî Persona: Jordan (Analyst)

Purpose:
- Browse and filter **user-facing reports** that were created by analysts or generated by the system
- Minimal UI: user filter, date range, search, efficiency filter, and a compact table
- Works even if API is down (loads dummy data)

Assumptions:
- The API exposes GET /reports returning a list of report objects
  Example fields (aligned to your diagram):
  {
    report_id, user_id, analyst_id, title, date, completed_goals,
    uncompleted_goal, work_efficiency, device_ids, time_based_summary
  }
- If your API supports a user-specific endpoint (e.g., /users/<id>/reports),
  you can toggle that on with USE_USER_ENDPOINT.
"""
from __future__ import annotations

import json
from datetime import date, datetime
from typing import Any, Dict, List

import streamlit as st

# RBAC navigation
try:
    from modules.nav import SideBarLinks
    SideBarLinks()
except Exception:
    pass

st.set_page_config(page_title="User Reports (Jordan ‚Äì Analyst)", page_icon="üóÇÔ∏è", layout="wide")

#  Config 
API_BASE = "http://web-api:4000"  # hardcoded, like your other pages
REPORTS_ENDPOINT = f"{API_BASE}/reports"
USE_USER_ENDPOINT = False  # set True if your API supports /users/<id>/reports

#  Helper funcs 
def safe_get_json(url: str, default: Any) -> Any:
    import requests
    try:
        r = requests.get(url, timeout=8)
        r.raise_for_status()
        return r.json()
    except Exception:
        return default

st.title("User Reports")
st.caption("Persona: Jordan ‚Äî Role: Analyst")

#  Controls 
with st.container():
    col1, col2, col3, col4 = st.columns([1.2, 1, 1, 1.2])
    with col1:
        user_id = st.text_input("User ID (optional)", value="")
    with col2:
        start_date = st.date_input("Start date", value=date.today().replace(day=1))
    with col3:
        end_date = st.date_input("End date", value=date.today())
    with col4:
        search = st.text_input("Search title/summary", value="")

    c5, c6 = st.columns([1, 1])
    with c5:
        min_eff = st.slider("Min efficiency %", 0, 100, 0)
    with c6:
        show_json = st.toggle("Show JSON detail", value=False)

#  Fetch data
_dummy = [
    {
        "report_id": "rep-100",
        "user_id": "user-001",
        "analyst_id": "analyst-001",
        "title": "Week 28 Summary",
        "date": str(date.today()),
        "completed_goals": 5,
        "uncompleted_goal": 1,
        "work_efficiency": 82,
        "device_ids": ["dev-001"],
        "time_based_summary": "Mon-Wed conditioning, Thu-Fri strength, weekend recovery",
    },
    {
        "report_id": "rep-101",
        "user_id": "user-002",
        "analyst_id": "analyst-002",
        "title": "Week 28 Recap",
        "date": str(date.today()),
        "completed_goals": 3,
        "uncompleted_goal": 2,
        "work_efficiency": 64,
        "device_ids": ["dev-002", "dev-003"],
        "time_based_summary": "Light cardio, flexibility focus",
    },
]

if USE_USER_ENDPOINT and user_id:
    endpoint = f"{API_BASE}/users/{user_id}/reports"
else:
    endpoint = REPORTS_ENDPOINT

raw = safe_get_json(endpoint, default=_dummy)

# List shape
if isinstance(raw, dict) and "items" in raw:
    items: List[Dict[str, Any]] = list(raw["items"])  # type: ignore
elif isinstance(raw, list):
    items = raw  # type: ignore
else:
    items = _dummy

# Organize date range
from datetime import timedelta

start_dt = datetime.combine(start_date, datetime.min.time())
end_dt = datetime.combine(end_date, datetime.max.time())

filtered: List[Dict[str, Any]] = []
for r in items:
    # coerce date
    try:
        rd = datetime.fromisoformat(str(r.get("date")))
    except Exception:
        try:
            rd = datetime.strptime(str(r.get("date")), "%Y-%m-%d")
        except Exception:
            rd = datetime.today()

    if user_id and str(r.get("user_id", "")).strip() != user_id.strip():
        continue
    if not (start_dt <= rd <= end_dt):
        continue
    if min_eff and int(r.get("work_efficiency", 0)) < min_eff:
        continue

    hay = (str(r.get("title", "")) + " " + str(r.get("time_based_summary", ""))).lower()
    if search and search.lower() not in hay:
        continue

    filtered.append(r)

# ----------------------- Render table ---------------------
st.subheader("Results")
if not filtered:
    st.info("No reports match your filters yet.")
else:
    try:
        import pandas as pd
        df = pd.DataFrame(filtered)
        # Order columns for readability
        preferred = [
            "report_id", "user_id", "analyst_id", "title", "date",
            "completed_goals", "uncompleted_goal", "work_efficiency", "device_ids",
        ]
        cols = [c for c in preferred if c in df.columns] + [c for c in df.columns if c not in preferred]
        df = df[cols]
        st.dataframe(df, use_container_width=True, hide_index=True)

        c1, c2 = st.columns(2)
        with c1:
            st.download_button(
                "Download CSV",
                data=df.to_csv(index=False),
                file_name="user_reports.csv",
                mime="text/csv",
                use_container_width=True,
            )
        with c2:
            st.download_button(
                "Download JSON",
                data=json.dumps(filtered, indent=2),
                file_name="user_reports.json",
                mime="application/json",
                use_container_width=True,
            )
    except Exception:
        st.json(filtered)

